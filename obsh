#!/bin/bash

set -e

USAGE="
Obashidian - Obsidian Shell CLI (obsh)

Query data from obsidian vault for analysis and automation direct from the command line.

Usage:
obsh <cmd> <args>
obsh tag <tag>                   - Search for a tag in the vault
obsh reminder [date/dayofweek]   - Search for reminders for a specific date
obsh reminders                   - Search for all reminders
obsh block <block>               - Search for a block in the vault
obsh section <section>           - Search for a section in a file
obsh daily                       - Generate a daily note template

Options:
  -h, --help    Show this screen.
"

obshcli="${0}"

# If is not in a vault, exit
if [[ ! -d ".obsidian" ]]; then
  echo "Error: This isn't an obsidian vault."
  exit 1
fi

CMD=${1?"${USAGE}"}

if [[ "${CMD}" == "-h" || "${CMD}" == "--help" ]]; then
  echo "${USAGE}"
  exit 0
fi

if [[ "${CMD}" == "tag" ]]; then
  shift
  TAG="#${1?"${USAGE}"}"

  # Grep all files in current dir but ignoring hidden files/dirs
  grep -r --exclude-dir=".obsidian" --exclude="*/\.*" "${TAG}" . | \
    sed -E "s/#/@/" | \
    sed -E "s/^\.\/(.*\.md):(.*)$/\2 \n  \[ref](\1\) \n/"
  exit 0
fi

# In OSX, check if gdate is installed
if [[ "$(uname)" == "Darwin" ]]; then
  if [[ ! -x "$(command -v gdate)" ]]; then
    echo "Missing: For OSX 'gdate' is required for calculating dates."
    echo "Please install it with 'brew install coreutils'"
    exit 1
  fi
fi

## Helper function to calculate date in both OSX and Linux
function _date() {
  if [[ "$(uname)" == "Darwin" ]]; then
    gdate "${@}"
  else
    date "${@}"
  fi
}

yesterday="$(_date -d 'yesterday' +%d-%m-%Y)"
tomorrow="$(_date -d 'tomorrow' +%d-%m-%Y)"

# Reminder cmd
# Check if a reminder is due
# This is the reminder format #reminder:DD-MM-YYYY
if [[ "${CMD}" == "reminder" ]]; then
  shift
  DATE=${1-"$(_date +%d-%m-%Y)"}
  DAYOFWEEK=$(_date +%A | tr '[:upper:]' '[:lower:]')


  TAG_TO_GREP="#reminder:$DATE|#reminder:$DAYOFWEEK"
  echo "Reminders for ${DATE} - ${DAYOFWEEK}"

  grep -r --exclude="*/\.*" -E "$TAG_TO_GREP" . | \
    sed -E "s/#/@/" | \
    sed -E "s/^\.\/(.*\.md):(.*)$/\2 \n  \[ref](\1\) \n/"
  exit 0
fi

if [[ "${CMD}" == "reminders" ]]; then
  shift
  printf "All reminders \n\n"
  TAG_TO_GREP="#reminder"
  grep -r --exclude="*/\.*" "$TAG_TO_GREP" . | \
    sed -E "s/#/@/" | \
    sed -E "s/^\.\/(.*\.md):(.*)$/\2 \n  \[ref](\1\) \n/"
  exit 0
fi

# Collect blocks of content from the vault
# This is the block format: 
#<!-- ini:<block_name> -->
#   content
#<!-- end:<block_name> -->
if [[ "${CMD}" == "block" ]]; then
  shift
  BLOCK=${1?"${USAGE}"}

  echo "-- ${BLOCK} --"
  grep -rl "<!-- ini:$BLOCK -->" . | \
    xargs -I{} awk "/<!-- ini:$BLOCK -->/{f=1;next} /<!-- end:$BLOCK -->/{f=0} f" {} 

  exit 0
fi

# Collects a sections of content from the vault
# A section starts with a ## title and goes till the next section
# This is the section format:
# ## SectionOne
#  content
# ## SectionTwo
if [[ "${CMD}" == "section" ]]; then
  shift
  SECTION=${1?"${USAGE}"}
  FILE=${2?"Requires a file to search for the section"}

  awk "/^## ${SECTION}/{f=1;next} /^##/{f=0} f" ${FILE}
  exit 0
fi

if [[ "${CMD}" == "daily" ]]; then
  shift
  echo "---
title: Daily
date: $(_date +%d-%m-%Y)
---

[[daily/$yesterday|yesterday]]
[[daily/$tomorrow|tomorrow]]

## Todos

$($obshcli tag todo)

## Assumptions

$($obshcli tag assumption)

## Waiting

$($obshcli tag waiting)

## Today reminders

$($obshcli reminder)

## Inbox

$(obsh section Inbox daily/$yesterday.md)
"
  exit 0
fi
 
echo "ERROR: ${0} unknown command ${CMD}"
echo "${USAGE}"
exit 1
